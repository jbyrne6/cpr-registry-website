{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\jbyrn\\\\Desktop\\\\Coding\\\\react-cpr-registry\\\\cpr-registry\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\jbyrn\\\\Desktop\\\\Coding\\\\react-cpr-registry\\\\cpr-registry\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\jbyrn\\\\Desktop\\\\Coding\\\\react-cpr-registry\\\\cpr-registry\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\jbyrn\\\\Desktop\\\\Coding\\\\react-cpr-registry\\\\cpr-registry\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\jbyrn\\\\Desktop\\\\Coding\\\\react-cpr-registry\\\\cpr-registry\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\jbyrn\\\\Desktop\\\\Coding\\\\react-cpr-registry\\\\cpr-registry\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\jbyrn\\\\Desktop\\\\Coding\\\\react-cpr-registry\\\\cpr-registry\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\jbyrn\\\\Desktop\\\\Coding\\\\react-cpr-registry\\\\cpr-registry\\\\src\\\\containers\\\\Signup.js\";\nimport React, { Component } from \"react\";\nimport \"./Signup.css\";\nimport { Form, Button, Row, Col } from 'react-bootstrap';\nimport Axios from \"axios\";\n\nvar Signup =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Signup, _Component);\n\n  function Signup(props) {\n    var _this;\n\n    _classCallCheck(this, Signup);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Signup).call(this, props));\n\n    _this.resetState = function () {\n      _this.setState(_this.baseState);\n    };\n\n    _this.handleFirstNameChange = function (event) {\n      _this.setState({\n        firstName: event.target.value,\n        firstNameNullError: event.target.value === ''\n      });\n    };\n\n    _this.handleLastNameChange = function (event) {\n      _this.setState({\n        lastName: event.target.value,\n        lastNameNullError: event.target.value === ''\n      });\n    };\n\n    _this.handleEmailChange = function (event) {\n      _this.setState({\n        email: event.target.value,\n        emailNullError: event.target.value === ''\n      });\n    };\n\n    _this.handleValidateEmailChange = function (event) {\n      _this.setState({\n        validateEmail: event.target.value,\n        confirmationemailNullError: event.target.value === ''\n      });\n    };\n\n    _this.handlePhoneChange = function (event) {\n      _this.setState({\n        phone: event.target.value,\n        phoneNullError: event.target.value === ''\n      });\n    };\n\n    _this.handleZipChange = function (event) {\n      _this.setState({\n        zip: event.target.value,\n        zipNullError: event.target.value === ''\n      });\n    };\n\n    _this.cleanUpPhone = function (phoneNumber) {\n      var phoneClean = phoneNumber !== '' ? phoneNumber.match(/\\d+/g).map(Number).join('') : '';\n      return phoneClean;\n    };\n\n    _this.postParticipantData =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(data) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", Axios.post('http://localhost:5000/serverport/add', data));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.getDatabaseResponse =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", Axios.get('http://localhost:5000/serverport/dbResponse'));\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    _this.handleSubmit = function (event) {\n      event.preventDefault();\n\n      if (/\\d/.test(_this.state.phone)) {\n        var cleanPhone = _this.cleanUpPhone(_this.state.phone);\n\n        if (cleanPhone === '') {\n          alert('in if statement');\n          cleanPhone = _this.state.phone;\n        }\n\n        alert(typeof cleanPhone);\n\n        _this.setState({\n          phoneClean: cleanPhone\n        });\n      } else {\n        _this.setState({\n          noNumberPhoneError: true\n        });\n      }\n\n      alert(_this.state.phoneClean);\n      var _this$state = _this.state,\n          firstName = _this$state.firstName,\n          lastName = _this$state.lastName,\n          email = _this$state.email,\n          validateEmail = _this$state.validateEmail,\n          phone = _this$state.phone,\n          zip = _this$state.zip,\n          firstNameNullError = _this$state.firstNameNullError,\n          lastNameNullError = _this$state.lastNameNullError,\n          emailNullError = _this$state.emailNullError,\n          confirmationemailNullError = _this$state.confirmationemailNullError,\n          validateemailNullError = _this$state.validateemailNullError,\n          phoneNullError = _this$state.phoneNullError,\n          noNumberPhoneError = _this$state.noNumberPhoneError,\n          zipNullError = _this$state.zipNullError;\n      var data = {\n        firstName: firstName,\n        lastName: lastName,\n        email: email,\n        phone: phone,\n        phoneClean: _this.state.phoneClean,\n        zip: zip // Axios.all([this.postParticipantData(data), this.getDatabaseResponse()])\n        //   .then(Axios.spread(function (acct, perms) {\n        //     console.log(acct)\n        //     console.log(perms)\n        //   }));\n\n      };\n      Axios.post('http://localhost:5000/serverport/add', data).then(Axios.get('http://localhost:5000/serverport/dbResponse').then(function (response) {\n        console.log(response.data);\n      })); // dbPost.then(result => {\n      //   console.log('result = ', result)\n      // }).catch(err => {\n      //   console.log('CATCH = ', err)\n      // });\n      // reset the state to empty\n      // this.setState(this.resetState);\n      // this.setState({lastName: '', lastNameNullError: true})\n      // if (this.lastName === '') {\n      //   alert ('last name cant be empty')\n      // }\n\n      alert(\"Your state values: \\n \\n      firstName: \".concat(firstName, \" \\n \\n      lastName: \").concat(lastName, \" \\n \\n      email: \").concat(email, \" \\n \\n      validateEmail: \").concat(validateEmail, \" \\n \\n      phone: \").concat(phone, \" \\n \\n      phoneClean: \").concat(data.phoneClean, \" \\n\\n      zip: \").concat(zip, \" \\n\\n    \"));\n      alert(\"      \\n      firstNameNullError: \".concat(firstNameNullError, \" \\n\\n      lastNameNullError: \").concat(lastNameNullError, \" \\n\\n      emailNullError: \").concat(emailNullError, \" \\n\\n      confirmationemailNullError: \").concat(confirmationemailNullError, \" \\n\\n      validateemailNullError: \").concat(validateemailNullError, \" \\n\\n      emailRepeatedInDBError: \").concat(_this.state.confirmationemailNullError, \" \\n\\n      phoneNullError: \").concat(phoneNullError, \" \\n\\n      noNumberPhoneError: \").concat(noNumberPhoneError, \" \\n\\n      zipNullError: \").concat(zipNullError, \"\\n    \"));\n    };\n\n    _this.state = {\n      firstName: '',\n      lastName: '',\n      email: '',\n      validateEmail: '',\n      phone: '',\n      phoneClean: '',\n      zip: '',\n      firstNameNullError: true,\n      lastNameNullError: true,\n      emailNullError: true,\n      confirmationemailNullError: true,\n      validateemailNullError: true,\n      emailRepeatedInDBError: false,\n      phoneNullError: true,\n      noNumberPhoneError: false,\n      zipNullError: true\n    };\n    _this.baseState = _this.state;\n    return _this;\n  }\n\n  _createClass(Signup, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Form, {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, \"Register for the CPR Registry\"), React.createElement(\"div\", {\n        className: \"middle-column\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, React.createElement(Form.Group, {\n        controlID: \"formBasicFirstName\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, React.createElement(Form.Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, \"First Name\"), React.createElement(Form.Control, {\n        type: \"firstName\",\n        placeholder: \"First Name\",\n        value: this.state.firstName,\n        onChange: this.handleFirstNameChange // className={`form-control ${ !this.state.firstNameNullError ? '':'is-invalid' }`}\n        // onBlur={this.validateFirstName} \n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }))), React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, React.createElement(Form.Group, {\n        controlID: \"formBasicLastName\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, React.createElement(Form.Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, \"Last Name\"), React.createElement(Form.Control, {\n        type: \"lastName\",\n        placeholder: \"Last Name\",\n        value: this.state.lastName,\n        onChange: this.handleLastNameChange // className={`form-control ${ !this.state.lastNameNullError ? '':'is-invalid' }`}\n        // onBlur={this.validateLastName} \n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }))))), React.createElement(\"div\", {\n        className: \"middle-column\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }, React.createElement(Form.Group, {\n        controlId: \"formBasicEmail\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, React.createElement(Form.Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, \"Email address\"), React.createElement(Form.Control, {\n        // className = {[`form-control ${ !this.state.emailNullError ? '':'is-invalid' }`, 'input-group'].join(' ')} \n        className: \"input-group\",\n        type: \"email\",\n        placeholder: \"Enter email\",\n        value: this.state.email,\n        onChange: this.handleEmailChange // onBlur={this.validateEmailName} \n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      })), React.createElement(Form.Group, {\n        controlId: \"formBasicEmailConfirm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }, React.createElement(Form.Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236\n        },\n        __self: this\n      }, \"Confirm email address\"), React.createElement(Form.Control, {\n        // className = {[`form-control ${ !this.state.confirmationemailNullError ? '':'is-invalid' }`, 'input-group'].join(' ')} \n        className: \"input-group\",\n        type: \"email\",\n        placeholder: \"Enter email\",\n        value: this.state.validateEmail,\n        onChange: this.handleValidateEmailChange // onBlur={this.validateValidateEmailName} \n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"middle-column\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      }, React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      }, React.createElement(Form.Group, {\n        controlId: \"formBasicPhoneNumber\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }, React.createElement(Form.Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      }, \"Phone\"), React.createElement(Form.Control, {\n        type: \"phoneNumber\",\n        placeholder: \"Phone Number\",\n        value: this.state.phone,\n        onChange: this.handlePhoneChange // className={`form-control ${ !this.state.phoneNullError ? '':'is-invalid' }`}\n        // onBlur={this.validatePhone} \n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      }))), React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263\n        },\n        __self: this\n      }, React.createElement(Form.Group, {\n        controlId: \"formBasicZipCode\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264\n        },\n        __self: this\n      }, React.createElement(Form.Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265\n        },\n        __self: this\n      }, \"Zip\"), React.createElement(Form.Control, {\n        type: \"zipCode\",\n        placeholder: \"Zip Code\",\n        value: this.state.zip,\n        onChange: this.handleZipChange // className={`form-control ${ !this.state.zipNullError ? '':'is-invalid' }`}\n        // onBlur={this.validateZip} \n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266\n        },\n        __self: this\n      }))))), React.createElement(\"div\", {\n        className: \"middle-column\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"primary\",\n        type: \"submit\",\n        size: \"lg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279\n        },\n        __self: this\n      }, \"Submit\")));\n    }\n  }]);\n\n  return Signup;\n}(Component);\n\nexport { Signup as default };","map":{"version":3,"sources":["C:\\Users\\jbyrn\\Desktop\\Coding\\react-cpr-registry\\cpr-registry\\src\\containers\\Signup.js"],"names":["React","Component","Form","Button","Row","Col","Axios","Signup","props","resetState","setState","baseState","handleFirstNameChange","event","firstName","target","value","firstNameNullError","handleLastNameChange","lastName","lastNameNullError","handleEmailChange","email","emailNullError","handleValidateEmailChange","validateEmail","confirmationemailNullError","handlePhoneChange","phone","phoneNullError","handleZipChange","zip","zipNullError","cleanUpPhone","phoneNumber","phoneClean","match","map","Number","join","postParticipantData","data","post","getDatabaseResponse","get","handleSubmit","preventDefault","test","state","cleanPhone","alert","noNumberPhoneError","validateemailNullError","then","response","console","log","emailRepeatedInDBError"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Signup.css\";\r\nimport { Form, Button, Row, Col } from 'react-bootstrap';\r\nimport Axios from \"axios\";\r\n\r\nexport default class Signup extends Component {  \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      firstName:'',\r\n      lastName:'',\r\n      email:'',\r\n      validateEmail:'',\r\n      phone:'',\r\n      phoneClean:'',\r\n      zip:'',\r\n      firstNameNullError: true,\r\n      lastNameNullError: true,\r\n      emailNullError: true,\r\n      confirmationemailNullError: true,\r\n      validateemailNullError: true,\r\n      emailRepeatedInDBError: false,\r\n      phoneNullError: true,\r\n      noNumberPhoneError: false,\r\n      zipNullError: true,\r\n    }\r\n    this.baseState = this.state;\r\n  }\r\n\r\n  resetState = () => {\r\n    this.setState(this.baseState)\r\n  }\r\n\r\n  handleFirstNameChange = (event) => {\r\n    this.setState({firstName: event.target.value, firstNameNullError: event.target.value === ''});\r\n  }\r\n\r\n  handleLastNameChange = (event) => {\r\n    this.setState({lastName: event.target.value, lastNameNullError: event.target.value === ''});\r\n  }\r\n\r\n  handleEmailChange = (event) => {\r\n    this.setState({email: event.target.value, emailNullError: event.target.value === ''});\r\n  }\r\n\r\n  handleValidateEmailChange = (event) => {\r\n    this.setState({validateEmail: event.target.value, confirmationemailNullError: event.target.value === ''});\r\n  }\r\n\r\n  handlePhoneChange = (event) => {\r\n    this.setState({phone: event.target.value, phoneNullError: event.target.value === ''});\r\n  }\r\n\r\n  handleZipChange = (event) => {\r\n    this.setState({zip: event.target.value, zipNullError: event.target.value === ''});\r\n  }\r\n\r\n  cleanUpPhone = (phoneNumber) => {\r\n    let phoneClean = phoneNumber !== '' ? phoneNumber.match(/\\d+/g).map(Number).join('') : ''\r\n    return phoneClean\r\n  }\r\n\r\n  postParticipantData = async (data) => {\r\n    return Axios.post('http://localhost:5000/serverport/add', data);\r\n  }\r\n\r\n  getDatabaseResponse = async () => {\r\n    return Axios.get('http://localhost:5000/serverport/dbResponse');\r\n  }\r\n\r\n  // validateFirstName = () => {\r\n  //   const { firstName } = this.state;\r\n  //   this.setState({\r\n  //     firstNameNullError:\r\n  //       firstName.length > 0 ? null : 'First name must not be empty'\r\n  //   });\r\n  // }\r\n\r\n  // validateLastName = () => {\r\n  //   this.setState({lastNameNullError: this.lastName === ''});\r\n  //   // if (this.state.lastNameNullError) {\r\n  //   //   alert('Last name can\\'t be empty')\r\n  //   // }\r\n  // }\r\n  \r\n  // validateEmail = () => {\r\n  //   const { email } = this.state;\r\n  //   this.setState({\r\n  //     emailNullError:\r\n  //       email.length > 0 ? null : 'Email must not be empty'\r\n  //   });\r\n  // }\r\n\r\n  // validateValidateEmail = () => {\r\n  //   const { validateEmail, email } = this.state;\r\n  //   this.setState({\r\n  //     validateemailNullError:\r\n  //       (validateEmail.length > 0 && validateEmail == email) ? null : 'Validate email must not be empty'\r\n  //   });\r\n  // }\r\n\r\n  // validatePhone = () => {\r\n  //   const { phone } = this.state;\r\n  //   this.setState({\r\n  //     phoneNullError:\r\n  //       phone.length > 0 ? null : 'First name must not be empty'\r\n  //   });\r\n  // }\r\n\r\n  // validateZip = () => {\r\n  //   const { zip } = this.state;\r\n  //   this.setState({\r\n  //     zipNullError:\r\n  //       zip.length > 0 ? null : 'First name must not be empty'\r\n  //   });\r\n  // }\r\n\r\n  // invalidSubmission = () => {\r\n\r\n  // }\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    if (/\\d/.test(this.state.phone)) {\r\n      let cleanPhone = this.cleanUpPhone(this.state.phone)\r\n      if (cleanPhone === '') {\r\n        alert('in if statement')\r\n        cleanPhone = this.state.phone\r\n      }\r\n      alert(typeof (cleanPhone))\r\n      this.setState({phoneClean: cleanPhone})\r\n    } else {\r\n      this.setState({noNumberPhoneError: true})\r\n    }\r\n    alert(this.state.phoneClean)\r\n    const { firstName, lastName, email, validateEmail, phone, zip, firstNameNullError, lastNameNullError, emailNullError, confirmationemailNullError, validateemailNullError, phoneNullError, noNumberPhoneError, zipNullError } = this.state\r\n    const data = {firstName: firstName, lastName: lastName, email: email, phone: phone, phoneClean: this.state.phoneClean, zip: zip}\r\n\r\n    // Axios.all([this.postParticipantData(data), this.getDatabaseResponse()])\r\n    //   .then(Axios.spread(function (acct, perms) {\r\n    //     console.log(acct)\r\n    //     console.log(perms)\r\n    //   }));\r\n    Axios.post('http://localhost:5000/serverport/add', data).then(\r\n      Axios.get('http://localhost:5000/serverport/dbResponse')\r\n      .then(response => {\r\n        console.log(response.data);\r\n      }));\r\n\r\n    // dbPost.then(result => {\r\n    //   console.log('result = ', result)\r\n    // }).catch(err => {\r\n    //   console.log('CATCH = ', err)\r\n    // });\r\n    // reset the state to empty\r\n    // this.setState(this.resetState);\r\n    // this.setState({lastName: '', lastNameNullError: true})\r\n    // if (this.lastName === '') {\r\n    //   alert ('last name cant be empty')\r\n    // }\r\n    alert(`Your state values: \\n \r\n      firstName: ${firstName} \\n \r\n      lastName: ${lastName} \\n \r\n      email: ${email} \\n \r\n      validateEmail: ${validateEmail} \\n \r\n      phone: ${phone} \\n \r\n      phoneClean: ${data.phoneClean} \\n\r\n      zip: ${zip} \\n\r\n    `)\r\n    \r\n    alert(`      \r\n      firstNameNullError: ${firstNameNullError} \\n\r\n      lastNameNullError: ${lastNameNullError} \\n\r\n      emailNullError: ${emailNullError} \\n\r\n      confirmationemailNullError: ${confirmationemailNullError} \\n\r\n      validateemailNullError: ${validateemailNullError} \\n\r\n      emailRepeatedInDBError: ${this.state.confirmationemailNullError} \\n\r\n      phoneNullError: ${phoneNullError} \\n\r\n      noNumberPhoneError: ${noNumberPhoneError} \\n\r\n      zipNullError: ${zipNullError}\r\n    `)\r\n  } \r\n\r\n  render() {\r\n    return (\r\n      <Form onSubmit={this.handleSubmit}>\r\n        <p className=\"title\">\r\n          Register for the CPR Registry\r\n        </p>\r\n        {/* <div className = \"input-group\"> */}\r\n        <div className = \"middle-column\">\r\n          <Row>\r\n            <Col>\r\n              <Form.Group controlID=\"formBasicFirstName\">\r\n                <Form.Label>First Name</Form.Label>\r\n                <Form.Control \r\n                  type=\"firstName\" \r\n                  placeholder=\"First Name\"  \r\n                  value={this.state.firstName} \r\n                  onChange={this.handleFirstNameChange}\r\n                  // className={`form-control ${ !this.state.firstNameNullError ? '':'is-invalid' }`}\r\n                  // onBlur={this.validateFirstName} \r\n                  />\r\n              </Form.Group>\r\n            </Col>\r\n            <Col>\r\n              <Form.Group controlID=\"formBasicLastName\">\r\n                <Form.Label>Last Name</Form.Label>\r\n                <Form.Control \r\n                  type=\"lastName\" \r\n                  placeholder=\"Last Name\"  \r\n                  value={this.state.lastName} \r\n                  onChange={this.handleLastNameChange}\r\n                  // className={`form-control ${ !this.state.lastNameNullError ? '':'is-invalid' }`}\r\n                  // onBlur={this.validateLastName} \r\n                  />\r\n              </Form.Group>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n        <div className = \"middle-column\">\r\n          <Form.Group  controlId=\"formBasicEmail\">\r\n            <Form.Label>Email address</Form.Label>\r\n            <Form.Control \r\n              // className = {[`form-control ${ !this.state.emailNullError ? '':'is-invalid' }`, 'input-group'].join(' ')} \r\n              className = 'input-group'\r\n              type=\"email\" \r\n              placeholder=\"Enter email\"  \r\n              value={this.state.email} \r\n              onChange={this.handleEmailChange}\r\n              // onBlur={this.validateEmailName} \r\n              />\r\n          </Form.Group>\r\n\r\n          <Form.Group  controlId=\"formBasicEmailConfirm\">\r\n            <Form.Label>Confirm email address</Form.Label>\r\n            <Form.Control \r\n              // className = {[`form-control ${ !this.state.confirmationemailNullError ? '':'is-invalid' }`, 'input-group'].join(' ')} \r\n              className = 'input-group'\r\n              type=\"email\" placeholder=\"Enter email\"  \r\n              value={this.state.validateEmail} \r\n              onChange={this.handleValidateEmailChange}\r\n              // onBlur={this.validateValidateEmailName} \r\n              />\r\n          </Form.Group>\r\n        </div>\r\n        {/* <div className = \"input-group\"> */}\r\n        <div className = \"middle-column\">\r\n          <Row>\r\n            <Col>\r\n              <Form.Group controlId=\"formBasicPhoneNumber\">\r\n                <Form.Label>Phone</Form.Label>\r\n                <Form.Control \r\n                  type=\"phoneNumber\" \r\n                  placeholder=\"Phone Number\"  \r\n                  value={this.state.phone} \r\n                  onChange={this.handlePhoneChange}\r\n                  // className={`form-control ${ !this.state.phoneNullError ? '':'is-invalid' }`}\r\n                  // onBlur={this.validatePhone} \r\n                  />\r\n              </Form.Group>\r\n            </Col>\r\n            <Col>\r\n              <Form.Group controlId=\"formBasicZipCode\">\r\n                <Form.Label>Zip</Form.Label>\r\n                <Form.Control \r\n                  type=\"zipCode\" \r\n                  placeholder=\"Zip Code\"  \r\n                  value={this.state.zip} \r\n                  onChange={this.handleZipChange}\r\n                  // className={`form-control ${ !this.state.zipNullError ? '':'is-invalid' }`}\r\n                  // onBlur={this.validateZip} \r\n                  />\r\n              </Form.Group>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n        <div className = \"middle-column\">\r\n          <Button variant=\"primary\" type=\"submit\" size=\"lg\">\r\n            Submit\r\n          </Button>\r\n        </div>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}